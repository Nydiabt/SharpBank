// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SharpBank.API;

#nullable disable

namespace SharpBank.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211130134410_FK")]
    partial class FK
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SharpBank.Models.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccountId"), 1L, 1);

                    b.Property<long?>("BalanceId")
                        .HasColumnType("bigint");

                    b.Property<long>("BankId")
                        .HasColumnType("bigint");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.HasIndex("BalanceId");

                    b.HasIndex("BankId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("SharpBank.Models.Bank", b =>
                {
                    b.Property<long>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BankId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BankId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("SharpBank.Models.Funds", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("FundsTable");
                });

            modelBuilder.Entity("SharpBank.Models.Money", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<long?>("FundsId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FundsId");

                    b.ToTable("Money");
                });

            modelBuilder.Entity("SharpBank.Models.Transaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransactionId"), 1L, 1);

                    b.Property<Guid?>("AmountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("DestinationAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("DestinationBankId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("On")
                        .HasColumnType("datetime2");

                    b.Property<long>("SourceAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourceBankId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("AmountId");

                    b.HasIndex("DestinationAccountId");

                    b.HasIndex("SourceAccountId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("SharpBank.Models.TransactionCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long>("BankId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("IMPS")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NEFT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RTGS")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("TransactionCharge");
                });

            modelBuilder.Entity("SharpBank.Models.Account", b =>
                {
                    b.HasOne("SharpBank.Models.Funds", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceId");

                    b.HasOne("SharpBank.Models.Bank", "Bank")
                        .WithMany("Accounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Balance");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("SharpBank.Models.Money", b =>
                {
                    b.HasOne("SharpBank.Models.Funds", "Funds")
                        .WithMany("Wallets")
                        .HasForeignKey("FundsId");

                    b.Navigation("Funds");
                });

            modelBuilder.Entity("SharpBank.Models.Transaction", b =>
                {
                    b.HasOne("SharpBank.Models.Money", "Amount")
                        .WithMany()
                        .HasForeignKey("AmountId");

                    b.HasOne("SharpBank.Models.Account", "DestinationAccount")
                        .WithMany("CreditTransactions")
                        .HasForeignKey("DestinationAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SharpBank.Models.Account", "SourceAccount")
                        .WithMany("DebitTransactions")
                        .HasForeignKey("SourceAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Amount");

                    b.Navigation("DestinationAccount");

                    b.Navigation("SourceAccount");
                });

            modelBuilder.Entity("SharpBank.Models.TransactionCharge", b =>
                {
                    b.HasOne("SharpBank.Models.Bank", "Bank")
                        .WithMany("Charges")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("SharpBank.Models.Account", b =>
                {
                    b.Navigation("CreditTransactions");

                    b.Navigation("DebitTransactions");
                });

            modelBuilder.Entity("SharpBank.Models.Bank", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Charges");
                });

            modelBuilder.Entity("SharpBank.Models.Funds", b =>
                {
                    b.Navigation("Wallets");
                });
#pragma warning restore 612, 618
        }
    }
}
